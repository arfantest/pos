import { Component, OnInit } from "@angular/core";
import { FormBuilder, FormGroup, Validators } from "@angular/forms";
import { ActivatedRoute, Router } from "@angular/router";
import { NzMessageService } from "ng-zorro-antd/message";
import { AccountService } from "../../core/services/account.service";
import { CreateAccountDto } from "../../core/models/account.model";
import { NzCardModule } from "ng-zorro-antd/card";
import { NzInputModule } from "ng-zorro-antd/input";
import { NzBreadCrumbModule } from "ng-zorro-antd/breadcrumb";
import { FormsModule, ReactiveFormsModule } from "@angular/forms";
import { NzFormModule } from "ng-zorro-antd/form";
import { NzButtonModule } from "ng-zorro-antd/button";
import { NzSelectModule } from "ng-zorro-antd/select";
import { NzInputNumberModule } from "ng-zorro-antd/input-number";
import { NzGridModule } from "ng-zorro-antd/grid";
import { NzDividerModule } from "ng-zorro-antd/divider";
import { NzIconModule } from "ng-zorro-antd/icon";
import { CommonModule } from "@angular/common";
import { NzAlertModule } from "ng-zorro-antd/alert";
import { NzSwitchModule } from "ng-zorro-antd/switch";

@Component({
  selector: "app-account-form",
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormsModule,
    NzCardModule,
    NzFormModule,
    NzSelectModule,
    NzInputNumberModule,
    NzInputModule,
    NzButtonModule,
    NzBreadCrumbModule,
    NzGridModule,
    NzDividerModule,
    NzIconModule,
    NzAlertModule,
    NzSwitchModule,
  ],
  templateUrl: "./account-form.component.html",
  styleUrls: ["./account-form.component.scss"],
})
export class AccountFormComponent implements OnInit {
  accountForm: FormGroup;
  isEditMode = false;
  accountId: string | null = null;
  loading = false;
  submitting = false;

  accountTypes = [
    { label: "Asset", value: "asset", description: "Resources owned by the business" },
    { label: "Liability", value: "liability", description: "Debts owed by the business" },
    { label: "Equity", value: "equity", description: "Owner's stake in the business" },
    { label: "Income", value: "income", description: "Revenue generated by the business" },
    { label: "Expense", value: "expense", description: "Costs incurred by the business" },
  ];

  constructor(
    private fb: FormBuilder,
    private accountService: AccountService,
    private route: ActivatedRoute,
    private router: Router,
    private message: NzMessageService,
  ) {
    this.accountForm = this.fb.group({
      code: ["", [Validators.required, Validators.pattern(/^[A-Z0-9]+$/)]],
      name: ["", [Validators.required, Validators.minLength(2)]],
      type: [null, Validators.required],
      description: [""],
      balance: [0, [Validators.required, Validators.min(0)]],
      isActive: [true, Validators.required]
    });
  }

  ngOnInit(): void {
    this.accountId = this.route.snapshot.paramMap.get("id");
    this.isEditMode = !!this.accountId;

    if (this.isEditMode && this.accountId) {
      this.loadAccount(this.accountId);
    }
  }

  loadAccount(id: string): void {
    this.loading = true;
    this.accountService.getAccount(id).subscribe({
      next: (account) => {
        this.accountForm.patchValue({
          code: account.code,
          name: account.name,
          type: account.type,
          description: account.description,
          balance: account.balance,
          isActive: account.isActive
        });
        this.loading = false;
      },
      error: (error) => {
        console.error("Error loading account:", error);
        this.message.error("Failed to load account details");
        this.loading = false;
      },
    });
  }

  onSubmit(): void {
    if (this.accountForm.valid) {
      this.submitting = true;
      const accountData: CreateAccountDto = this.accountForm.value;

      const operation = this.isEditMode && this.accountId
        ? this.accountService.updateAccount(this.accountId, accountData)
        : this.accountService.createAccount(accountData);

      operation.subscribe({
        next: () => {
          this.message.success(
            this.isEditMode ? "Account updated successfully" : "Account created successfully"
          );
          // Clear the form after successful submission
          this.accountForm.reset({
            balance: 0,
            isActive: true
          });
          this.submitting = false;

          // Only navigate if not in edit mode
          if (!this.isEditMode) {
            this.router.navigate(["/accounts"]);
          }


          // this.router.navigate(["/accounts"]);
        },
        error: (error) => {
          console.error("Error saving account:", error);
          this.message.error(
            error.error?.message || "Failed to save account. Please try again."
          );
          this.submitting = false;
        },
      });
    } else {
      Object.values(this.accountForm.controls).forEach((control) => {
        if (control.invalid) {
          control.markAsDirty();
          control.updateValueAndValidity({ onlySelf: true });
        }
      });
    }
  }

  onCancel(): void {
    if (this.accountForm.dirty) {
      if (confirm("You have unsaved changes. Are you sure you want to leave?")) {
        this.router.navigate(["/accounts"]);
      }
    } else {
      this.router.navigate(["/accounts"]);
    }
  }

  getSelectedTypeDescription(): string {
    const selectedType = this.accountForm.get('type')?.value;
    if (selectedType) {
      const type = this.accountTypes.find(t => t.value === selectedType);
      return type ? type.description : '';
    }
    return '';
  }
}






















// import { Component, DestroyRef, OnInit, inject, signal } from '@angular/core'
// import { CommonModule } from '@angular/common'
// import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms'
// import { Router, RouterModule, ActivatedRoute } from '@angular/router'

// import { NzGridModule } from 'ng-zorro-antd/grid'
// import { NzCardModule } from 'ng-zorro-antd/card'
// import { NzFormModule } from 'ng-zorro-antd/form'
// import { NzInputModule } from 'ng-zorro-antd/input'
// import { NzButtonModule } from 'ng-zorro-antd/button'
// import { NzSelectModule } from 'ng-zorro-antd/select'
// import { NzInputNumberModule } from 'ng-zorro-antd/input-number'
// import { NzSwitchModule } from 'ng-zorro-antd/switch'
// import { NzDividerModule } from 'ng-zorro-antd/divider'
// import { NzBreadCrumbModule } from 'ng-zorro-antd/breadcrumb'
// import { NzIconModule, NZ_ICONS } from 'ng-zorro-antd/icon'
// import { HomeOutline, InfoCircleOutline } from '@ant-design/icons-angular/icons'
// import { NzMessageService } from 'ng-zorro-antd/message'
// import { takeUntilDestroyed } from '@angular/core/rxjs-interop'
// import { filter, map } from 'rxjs/operators'

// type AccountTypeValue = 'asset' | 'liability' | 'equity' | 'revenue' | 'expense'

// interface AccountType {
//   label: string
//   value: AccountTypeValue
//   description: string
// }

// @Component({
//   selector: 'app-account-form',
//   standalone: true,
//   templateUrl: './account-form.component.html',
//   imports: [
//     CommonModule,
//     RouterModule,
//     ReactiveFormsModule,
//     // ng-zorro
//     NzGridModule,
//     NzCardModule,
//     NzFormModule,
//     NzInputModule,
//     NzButtonModule,
//     NzSelectModule,
//     NzInputNumberModule,
//     NzSwitchModule,
//     NzDividerModule,
//     NzBreadCrumbModule,
//     NzIconModule
//   ],
//   providers: [
//     { provide: NZ_ICONS, useValue: [HomeOutline, InfoCircleOutline] }
//   ]
// })
// export class AccountFormComponent implements OnInit {
//   private fb = inject(FormBuilder)
//   private router = inject(Router)
//   private route = inject(ActivatedRoute)
//   private destroyRef = inject(DestroyRef)
//   private message = inject(NzMessageService)

//   loading = signal(false)
//   submitting = signal(false)
//   isEditMode = signal(false)

//   accountTypes: AccountType[] = [
//     {
//       label: 'Asset',
//       value: 'asset',
//       description: 'Resources owned by the company expected to provide future benefits.'
//     },
//     {
//       label: 'Liability',
//       value: 'liability',
//       description: 'Obligations that the company owes to others.'
//     },
//     {
//       label: 'Equity',
//       value: 'equity',
//       description: 'Ownerâ€™s residual interest in the assets after deducting liabilities.'
//     },
//     {
//       label: 'Revenue',
//       value: 'revenue',
//       description: 'Income generated from normal business operations.'
//     },
//     {
//       label: 'Expense',
//       value: 'expense',
//       description: 'Costs incurred to generate revenue.'
//     }
//   ]

//   accountForm: FormGroup = this.fb.group({
//     code: [
//       '',
//       [
//         Validators.required,
//         Validators.pattern(/^[A-Z0-9\-]{2,16}$/) // uppercase letters, numbers, dash; 2-16 chars
//       ]
//     ],
//     name: ['', [Validators.required, Validators.minLength(2)]],
//     type: [null as AccountTypeValue | null, [Validators.required]],
//     balance: [0, [Validators.required, Validators.min(0)]],
//     isActive: [true],
//     description: ['']
//   })

//   ngOnInit(): void {
//     // Detect edit mode via route param like /accounts/:id/edit
//     this.route.paramMap
//       .pipe(
//         takeUntilDestroyed(this.destroyRef),
//         map((params) => params.get('id')),
//       )
//       .subscribe((id) => {
//         this.isEditMode.set(!!id)
//         if (id) {
//           this.loadAccount(id)
//         }
//       })

//     // Auto-uppercase and sanitize code field
//     this.accountForm.get('code')?.valueChanges
//       .pipe(takeUntilDestroyed(this.destroyRef))
//       .subscribe((val: string) => {
//         if (typeof val === 'string') {
//           const sanitized = val.toUpperCase().replace(/[^A-Z0-9\-]/g, '')
//           if (sanitized !== val) {
//             this.accountForm.get('code')?.setValue(sanitized, { emitEvent: false })
//           }
//         }
//       })
//   }

//   // Simulate a fetch when editing
//   private loadAccount(id: string) {
//     this.loading.set(true)
//     // TODO: Replace with real API call
//     setTimeout(() => {
//       // Example patched values
//       this.accountForm.patchValue({
//         code: 'CASH-1000',
//         name: 'Cash on Hand',
//         type: 'asset',
//         balance: 5000,
//         isActive: true,
//         description: 'Primary petty cash account.'
//       })
//       this.loading.set(false)
//     }, 700)
//   }

//   getSelectedTypeDescription(): string {
//     const v = this.accountForm.get('type')?.value as AccountTypeValue | null
//     const t = this.accountTypes.find((x) => x.value === v)
//     return t?.description ?? ''
//   }

//   onCancel(): void {
//     this.router.navigate(['/accounts'])
//   }

//   onSubmit(): void {
//     if (this.accountForm.invalid) {
//       this.accountForm.markAllAsTouched()
//       this.message.error('Please fix the errors in the form.')
//       return
//     }

//     this.submitting.set(true)
//     // TODO: Replace with real API request
//     setTimeout(() => {
//       const payload = this.accountForm.value
//       if (this.isEditMode()) {
//         this.message.success('Account updated successfully.')
//       } else {
//         this.message.success('Account created successfully.')
//       }
//       this.submitting.set(false)
//       this.router.navigate(['/accounts'])
//       // console.log('Submit payload:', payload)
//     }, 900)
//   }
// }