import { Component, OnInit } from "@angular/core"
import { FormBuilder, FormGroup, Validators } from "@angular/forms"
import { ActivatedRoute, Router } from "@angular/router"
import { NzMessageService } from "ng-zorro-antd/message"
import { AccountService } from "../../core/services/account.service"
import { AccountType, CreateAccountDto } from "../../core/models/account.model"
import { NzCardModule } from "ng-zorro-antd/card"
import { NzInputModule } from "ng-zorro-antd/input"
import { NzBreadCrumbModule } from "ng-zorro-antd/breadcrumb"
import { FormsModule, ReactiveFormsModule } from "@angular/forms"
import { NzFormModule } from "ng-zorro-antd/form"
import { NzButtonModule } from "ng-zorro-antd/button"
import { NzSelectModule } from "ng-zorro-antd/select"
import { NzInputNumberModule } from "ng-zorro-antd/input-number"

@Component({
  selector: "app-account-form",
  standalone:true,
  imports: [
    ReactiveFormsModule,
    FormsModule,
    NzCardModule,
    NzFormModule,
    NzSelectModule,
    NzInputNumberModule,
    NzInputModule,
    NzButtonModule,
    NzBreadCrumbModule,
  ],
  templateUrl: "./account-form.component.html",
  styleUrls: ["./account-form.component.scss"],
})
export class AccountFormComponent implements OnInit {
  accountForm: FormGroup
  isEditMode = false
  accountId: string | null = null
  loading = false
  submitting = false

  accountTypes = [
    { label: "Asset", value: AccountType.ASSET, description: "Resources owned by the business" },
    { label: "Liability", value: AccountType.LIABILITY, description: "Debts owed by the business" },
    { label: "Equity", value: AccountType.EQUITY, description: "Owner's stake in the business" },
    { label: "Income", value: AccountType.INCOME, description: "Revenue generated by the business" },
    { label: "Expense", value: AccountType.EXPENSE, description: "Costs incurred by the business" },
  ]

  constructor(
    private fb: FormBuilder,
    private accountService: AccountService,
    private route: ActivatedRoute,
    private router: Router,
    private message: NzMessageService,
  ) {
    this.accountForm = this.fb.group({
      code: ["", [Validators.required, Validators.pattern(/^[A-Z0-9]+$/)]],
      name: ["", [Validators.required, Validators.minLength(2)]],
      type: ["", Validators.required],
      description: [""],
    })
  }

  ngOnInit(): void {
    this.accountId = this.route.snapshot.paramMap.get("id")
    this.isEditMode = !!this.accountId

    if (this.isEditMode && this.accountId) {
      this.loadAccount(this.accountId)
    }
  }

  loadAccount(id: string): void {
    this.loading = true
    this.accountService.getAccount(id).subscribe({
      next: (account) => {
        this.accountForm.patchValue({
          code: account.code,
          name: account.name,
          type: account.type,
          description: account.description,
        })
        this.loading = false
      },
      error: (error) => {
        console.error("Error loading account:", error)
        this.message.error("Error loading account")
        this.loading = false
      },
    })
  }

  onSubmit(): void {
    if (this.accountForm.valid) {
      this.submitting = true
      const accountData: CreateAccountDto = this.accountForm.value

      const operation =
        this.isEditMode && this.accountId
          ? this.accountService.updateAccount(this.accountId, accountData)
          : this.accountService.createAccount(accountData)

      operation.subscribe({
        next: () => {
          const message = this.isEditMode ? "Account updated successfully" : "Account created successfully"
          this.message.success(message)
          this.router.navigate(["/accounts"])
        },
        error: (error) => {
          console.error("Error saving account:", error)
          this.message.error("Error saving account")
          this.submitting = false
        },
      })
    } else {
      Object.values(this.accountForm.controls).forEach((control) => {
        if (control.invalid) {
          control.markAsDirty()
          control.updateValueAndValidity({ onlySelf: true })
        }
      })
    }
  }

  onCancel(): void {
    this.router.navigate(["/accounts"])
  }
}
